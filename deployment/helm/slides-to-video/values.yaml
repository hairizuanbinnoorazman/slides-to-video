global:
  image:
    registry: null

nameOverride: null
fullNameOverride: null

imagePullSecrets: []

serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name: null
  # -- Image pull secrets for the service account
  imagePullSecrets: []
  # -- Annotations for the service account
  annotations: {}
  # -- Set this toggle to false to opt out of automounting API credentials for the service account
  automountServiceAccountToken: true

serviceMonitor:
  # -- If enabled, ServiceMonitor resources for Prometheus Operator are created
  enabled: false
  # -- Alternative namespace for ServiceMonitor resources
  namespace: null
  # -- Namespace selector for ServiceMonitor resources
  namespaceSelector: {}
  # -- ServiceMonitor annotations
  annotations: {}
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- ServiceMonitor scrape interval
  interval: null
  # -- ServiceMonitor scrape timeout in Go duration format (e.g. 15s)
  scrapeTimeout: null
  # -- ServiceMonitor relabel configs to apply to samples before scraping
  # https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
  relabelings: []
  # -- ServiceMonitor will use http by default, but you can pick https as well
  scheme: http
  # -- ServiceMonitor will use these tlsConfig settings to make the health check requests
  tlsConfig: null

manager:
  image: 
    registry: docker.io
    repository: slides-to-video/manager
    tag: null
    pullPolicy: IfNotPresent
  podSecurityContext: {}
  securityContext: {}
  imagePullSecrets: []
  resources: {}
  service:
    annotations: {}
    type: ClusterIP
    port: 8080
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podLabels: {}
  config: {}
  extraSecretMounts: []
  extraConfigmapMounts: []
  config: |
    server:
      host: "0.0.0.0"
      port: 8080
      trace: false
      svcAccFile: ""
      clientID: ""
      clientSecret: ""
      scope: ""
      redirectURI: ""
      authSecret: ""
      issuer: ""
      expiryTime: 3600
    datastore:
      type: "mysql"
      mysql:
        user: "user"
        password: "password"
        host: "mysql.default.svc"
        port: 3306
        dbName: "some-database"
    queue:
      type: "nats"
      nats:
        endpoint: "nats://nats.default.svc:4222"
        pdfToImageTopic: "pdf-splitter"
        imageToVideoTopic: "image-to-video"
        videoConcatTopic: "concatenate-video"
    blobStorage:
      type: "minio"
      minio:
        bucket: "videos"
        pdfFolder: "pdf"
        endpoint: "minio1-hl.default.svc.cluster.local:9000"
        accessKeyId: "minio"
        secretAccessKey: "minio123"
  
pdfSplitter:
  image: 
    registry: docker.io
    repository: slides-to-video/pdf-splitter
    tag: null
    pullPolicy: IfNotPresent
  podSecurityContext: {}
  securityContext: {}
  annotations: {}
  imagePullSecrets: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podLabels: {}
  config: {}
  extraSecretMounts: []
  extraConfigmapMounts: []
  config: |
    server:
      host: 0.0.0.0
      port: 8081
      trace: false
      svcAccFile: ""
      mode: queue
      processRoute: /
      managerHost: slides-to-video-manager.default.svc
      managerPort: 8080
    queue:
      type: "nats"
      nats:
        endpoint: "nats://nats.default.svc:4222"
      pdfToImageTopic: "pdf-splitter"
    blobStorage:
      type: minio
      minio:
        bucket: videos
        endpoint: "minio1-hl.default.svc.cluster.local:9000"
        accessKeyId: minio
        secretAccessKey: minio123
      pdfFolder: pdf
      imagesFolder: images

imageToVideo:
  image: 
    registry: docker.io
    repository: slides-to-video/image-to-video
    tag: null
    pullPolicy: IfNotPresent
  podSecurityContext: {}
  securityContext: {}
  annotations: {}
  imagePullSecrets: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podLabels: {}
  config: {}
  extraSecretMounts: []
  extraConfigmapMounts: []
  config: |
    server:
      host: 0.0.0.0
      port: 8080
      trace: false
      svcAccFile: ""
      mode: queue
      processRoute: /
      managerHost: slides-to-video-manager.default.svc
      managerPort: 8080
    queue:
      type: "nats"
      nats:
        endpoint: "nats://nats.default.svc:4222"
      imageToVideoTopic: "image-to-video"
    blobStorage:
      type: minio
      minio:
        bucket: videos
        endpoint: "minio1-hl.default.svc.cluster.local:9000"
        accessKeyId: minio
        secretAccessKey: minio123
      imagesFolder: images
      videoSnippetsFolder: video-snippets

concatenateVideo:
  image: 
    registry: docker.io
    repository: slides-to-video/concatenate-video
    tag: null
    pullPolicy: IfNotPresent
  podSecurityContext: {}
  securityContext: {}
  annotations: {}
  imagePullSecrets: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  podLabels: {}
  config: {}
  extraSecretMounts: []
  extraConfigmapMounts: []
  config: |
    server:
      host: 0.0.0.0
      port: 8080
      trace: false
      svcAccFile: ""
      mode: queue
      processRoute: /
      managerHost: slides-to-video-manager.default.svc
      managerPort: 8080
    queue:
      type: "nats"
      nats:
        endpoint: "nats://nats.default.svc:4222"
      concatenateVideoTopic: "concatenate-video"
    blobStorage:
      type: minio
      minio:
        bucket: videos
        endpoint: minio1-hl.default.svc.cluster.local:9000
        accessKeyId: minio
        secretAccessKey: minio123
      videoSnippetsFolder: video-snippets
      videoFolder: videos

mysql:
  enabled: true
  auth:
    database: some-database
    username: user
    password: password

nats:
  enabled: true
